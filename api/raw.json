{"majorversion": 0, "classmap": {"Status": {"description": "Status", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the status. Need to specify:\n<ul>\n<li>properties.item.content.content : the main content of the status.</li>\n<li>properties.item.content.permalink : a unique URL for this item.</li>\n</ul></li>\n<li>properties.item.user : user posting that item.</li>\n<li>properties.item.target : (optional) a target for this item. Default: Current item. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb (post) for this item</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Status", "name": "Status"}, "Comment": {"description": "Comment", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the comment. Need to specify:\n<ul>\n<li>properties.item.content.subject : subject of the comment (can be blank, can't be undefined</li>\n<li>properties.item.content.content : the main content of the comment,</li>\n<li>properties.item.content.permalink : a unique URL for this item.</li>\n</ul></li>\n<li>properties.item.user : user posting that comment.</li>\n<li>properties.item.target : (optional) a target for this item. Default: Current item. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb (post) for this item</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Comment", "name": "Comment"}, "KvsAPI": {"submodule": "KvsAPI", "name": "KvsAPI", "constructors": [{"params": [{"type": "Object", "name": "parameters", "description": " object for options<br/>\n<ul>\n<li>parameters.consumerKey</li>\n<li>parameters.consumerSecret</li>\n<li>parameters.authMethod : optional, in ['oauth','basic']. Default 'oauth'</li>\n</ul>"}], "description": "Key-Value Store API for Echo"}], "namespace": "", "module": "echo", "methods": {"put": {"params": [{"type": "object", "name": "kvs", "description": " Key-Value pair to store. Specify:\n<ul>\n<li>kvs.key : key</li>\n<li>kvs.value : value</li>\n<li>kvs.public : (optional, boolean) indicates if value is public or not (default: false)</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Put data into the Echo Key-Value database to store the third-party widgets' arbitrary data elements permanently.", "guessedname": "url", "guessedtype": "property"}, "del\n<ul>\n<li>kvs.key : key of the value to retrieve</li>\n<li>kvs.public : (optional) indicate if the KV pair is public or not</li>\n</ul>": {"params": [{"type": "function", "name": "callback", "description": " callback"}], "description": "Delete KV pair", "guessedname": "url", "guessedtype": "property"}, "get": {"params": [{"type": "object", "name": "kvs", "description": " Key of the value to retrieve. Specify:\n<ul>\n<li>kvs.key : key of the value to retrieve</li>\n<li>kvs.public : (optional) indicate if the KV pair is public or not</li>\n</ul>"}, {"type": "string", "name": "appkey", "description": " : customer application key</li>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Fetch data from the Echo Key-Value Store.", "guessedname": "url", "guessedtype": "property"}}, "file": "Class", "shortname": "KvsAPI", "description": "Key-Value Store API for Echo"}, "ItemsAPICore": {"name": "ItemsAPICore", "constructors": [{"params": [{"type": "Object", "name": "parameters", "description": " object for options<br/>\n<ul>\n<li>parameters.consumerKey</li>\n<li>parameters.consumerSecret</li>\n<li>parameters.authMethod : optional, in ['oauth','basic']. Default 'oauth'\n</ul>"}], "description": "Implements the 4 methods for ItemsAPI (submit, search, count, mux)"}], "namespace": "", "module": "echo", "methods": {"count": {"params": [{"type": "Object", "name": "query", "description": " Query to perform. Need to specify:\n<ul>\n<li>query.q : Echo Query Language query</li>\n<li>query.appkey : customer appkey</li>\n<li>query.since : optional. Since parameter</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback."}], "description": "\"count\" API method. <br /> Returns a number of items that match the specified query in JSON format. <br/> http://wiki.aboutecho.com/w/page/27888212/API-method-count", "guessedname": "url", "guessedtype": "property"}, "search": {"params": [{"type": "Object", "name": "query", "description": " Query to perform. Need to specify:\n<ul>\n<li>query.q : Echo Query Language query</li>\n<li>query.appkey : customer appkey</li>\n<li>query.since : optional. Since parameter</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "\"search\" API method <br /> Returns information about items that match the specified query in Activity Stream format. <br /> http://wiki.aboutecho.com/w/page/23491639/API-method-search", "guessedname": "url", "guessedtype": "property"}, "mux": {"params": [{"type": "object", "name": "query", "description": " JSON array of queries"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "\"mux\" API method <br/> The API method \"mux\" allows to \"multiplex\" requests, i.e. use a single API call to \"wrap\" several requests. The multiplexed requests are executed concurrently and independently by the Echo server. <br/> http://wiki.aboutecho.com/w/page/32433803/API-method-mux", "guessedname": "url", "guessedtype": "property"}, "submit": {"params": [{"type": "string", "name": "err", "description": " hopefully empty error"}, {"type": "Object", "name": "data", "description": " data.content MUST contain XML-formatted data to submit"}, {"type": "function", "name": "callback", "description": ""}], "description": "\"submit API method\" <br /> Endpoint to submit your data into the Echo Platform in the Activity Streams XML format. <br/> http://wiki.aboutecho.com/w/page/35059196/API-method-submit"}}, "file": "Class", "shortname": "ItemsAPICore", "description": "Implements the 4 methods for ItemsAPI (submit, search, count, mux)"}, "TBind": {"name": "TBind", "namespace": "", "module": "echo", "methods": {"ISODateString": {"function": "ISODateString", "params": [{"type": "Date", "name": "d", "description": " Format a date to be accepted by Echo"}], "guessedname": "ISODateString", "guessedtype": "function"}, "bind": {"function": "bind", "return": {"type": "function", "description": "The function passed in bound to the local scope"}, "description": "A bind function which binds the scope of the function to be called to the local scope of the object.", "params": [{"type": "function", "name": "fn", "description": " The function to bind the local scope to"}], "guessedname": "bind", "guessedtype": "function"}}, "file": "Trait", "shortname": "TBind", "description": "A Trait class for holding helper functions for enforcing scope"}, "req": {"name": "req", "namespace": "", "module": "echo", "guessedname": "my", "methods": {"get": {"params": [{"type": "object", "name": "options", "description": " Defines:\n<ul>\n<li>options.consumerKey Echo API Key</li>\n<li>options.consumerSecret Echo API Secret</li>\n<li>options.apiHost Echo API Url</li>\n<li>options.authMethod Authentication method, in ['oauth','basic']</li>\n</ul>"}, {"type": "string", "name": "url", "description": " URL representing the \"action\" of the get (depends on what is being get-ed)"}, {"type": "object", "name": "data", "description": " Data to get"}, {"type": "function", "name": "callback", "description": " callback called with the response of the GET"}], "description": "GET method"}, "postOAuth": {"private": "", "description": "POST, OAuth authentication", "guessedname": "consumerKey", "guessedtype": "property"}, "getBasic": {"private": "", "description": "GET Method, Basic authentication", "guessedname": "consumerKey", "guessedtype": "property"}, "postBasic": {"private": "", "description": "POST Method, Basic authentication", "guessedname": "consumerKey", "guessedtype": "property"}, "getOAuth": {"private": "", "description": "GET, OAuth authentication", "guessedname": "consumerKey", "guessedtype": "property"}, "post": {"params": [{"type": "object", "name": "options", "description": " Defines:\n<ul>\n<li>options.consumerKey Echo API Key</li>\n<li>options.consumerSecret Echo API Secret</li>\n<li>options.apiHost Echo API Url</li>\n<li>options.authMethod Authentication method, in ['oauth','basic']</li>\n</ul>"}, {"type": "string", "name": "url", "description": " URL representing the \"action\" of the post (depends on what is being posted)"}, {"type": "object", "name": "data", "description": " Data to post"}, {"type": "function", "name": "callback", "description": " callback called with the response of the POST"}], "description": "POST method"}}, "file": "https", "guessedtype": "property", "shortname": "req", "description": "Post and Get action for Echo."}, "FeedsAPI": {"submodule": "FeedsAPI", "name": "FeedsAPI", "constructors": [{"params": [{"type": "Object", "name": "parameters", "description": " object for options<br/>\n<ul>\n<li>parameters.consumerKey</li>\n<li>parameters.consumerSecret</li>\n<li>parameters.authMethod : optional, in ['oauth','basic']. Default 'oauth'\n</ul>"}], "description": "Feeds API for Echo"}], "namespace": "", "module": "echo", "guessedname": "parameters", "methods": {"unregister": {"params": [{"type": "object", "name": "feed", "description": " feed to unregister. Specify:\n<ul>\n<li>feed.url : (mandatory) url of the feed</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Unregister a feed for a consumer key", "guessedname": "url", "guessedtype": "property"}, "register": {"params": [{"type": "object", "name": "feed", "description": " feed to register. Specify:\n<ul>\n<li>feed.url : (mandatory) url of the new feed</li>\n<li>feed.interval : (optional) interval for polling the feed<li<\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Register a new feed for a consumer key", "guessedname": "url", "guessedtype": "property"}, "list": {"params": [{"type": "function", "name": "callback", "description": " callback"}], "description": "list all feeds attached to this consumer key", "guessedname": "url", "guessedtype": "property"}}, "file": "Class", "guessedtype": "property", "shortname": "FeedsAPI", "description": "Feeds API for Echo"}, "Note": {"description": "Note", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the note. Need to specify:\n<ul>\n<li>properties.item.content.content : the main content of the Note.</li>\n<li>properties.item.content.permalink : a unique URL for this item.</li>\n</ul></li>\n<li>properties.item.user : user posting that item.</li>\n<li>properties.item.target : (optional) a target for this item. Default: Current item. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb (post) for this item</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Note", "name": "Note"}, "UsersAPI": {"submodule": "UsersAPI", "name": "UsersAPI", "constructors": [{"params": [{"type": "Object", "name": "parameters", "description": " object for options<br/>\n<ul>\n<li>parameters.consumerKey</li>\n<li>parameters.consumerSecret</li>\n<li>parameters.authMethod : optional, in ['oauth','basic']. Default 'oauth'</li>\n</ul>"}], "description": "Users API for Echo"}], "namespace": "", "module": "echo", "methods": {"update": {"params": [{"type": "object", "name": "user", "description": " user to update. Need to specify:\n<ul>\n<li>user.identityURL : User identity URL</li>\n<li>user.subject : show which parameters should be updated</li>\n<li>user.content : contains data to be used for user update</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Update user information", "guessedname": "url", "guessedtype": "property"}, "whoAmI": {"params": [{"type": "object", "name": "user", "description": " : info for the user. Need to specify:\n<ul>\n<li>user.appKey : customer appKey</li>\n<li>user.sessionID : Backplane sessions ID for this user</li>\n</ul>"}], "description": "Retrieve currently logged in user information by session ID", "guessedname": "url", "guessedtype": "property"}, "get": {"params": [{"type": "string", "name": "id", "description": " user identityURL"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Fetch user information", "guessedname": "url", "guessedtype": "property"}}, "file": "req", "shortname": "UsersAPI", "description": "Users API for Echo"}, "Tag": {"description": "Tag/Untag", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the tag. Need to specify:\n<ul>\n<li>properties.item.content.id : id of the tag.</li>\n<li>properties.item.content.title : the tag itself.</li>\n</ul></li>\n<li>properties.item.user : user posting that item.</li>\n<li>properties.item.target : a mandatory target for this tag. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb for this item (post) -- set it to properly to tag or untag</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Tag", "name": "Tag"}, "ActivityObject": {"name": "ActivityObject", "constructors": [{"params": [{"type": "object", "name": "properties.", "description": " Specify:\n<ul>\n<li>properties.item.content : the item you want to create (depends on its kind, see subclasses documentation)</li>\n<li>properties.item.user : the user interacting with this item</li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb (post) for this item</li>\n</ul>"}], "description": "Parent class to define all the Activity Objects Echo deals with, and their method for XML rendering according to their verb..\nhttp://wiki.aboutecho.com/w/page/24780107/How%20To%20-%20Getting%20us%20your%20Firehose#Supportedactivityobjecttypes"}], "namespace": "", "module": "echo", "guessedname": "init", "methods": {"init": {"description": "Initialised the ActivityObject. Meta data Check.\nNeeds to be extended by Child classes (for content checking)\nIs automatically called at object spawning."}, "itemTemplate": {"private": "", "description": "Select and return the proper properties for an object.", "guessedname": "date", "guessedtype": "property"}, "renderPost": {"params": [{"type": "function", "name": "callback", "description": " callback (should very likely be a call to a \"submit\" method)"}], "description": "Forge a proper XML document ready for posting, using base template.", "guessedname": "self", "guessedtype": "property"}, "renderItem": {"params": [{"type": "function", "name": "callback", "description": " callback"}], "description": "Render the part of the Item that is <i>specific</i> to this item, using templates."}}, "file": "activityObjects.js", "guessedtype": "function", "shortname": "ActivityObject", "properties": {"item": {"description": "Define the values for this item.", "guessedname": "enumerable", "guessedtype": "property"}}, "description": "Parent class to define all the Activity Objects Echo deals with, and their method for XML rendering according to their verb..\nhttp://wiki.aboutecho.com/w/page/24780107/How%20To%20-%20Getting%20us%20your%20Firehose#Supportedactivityobjecttypes"}, "Article": {"description": "Article.", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the article. Need to specify:\n<ul>\n<li>properties.item.content.title : title of the article</li>\n<li>properties.item.content.content : the main content of the article,</li>\n<li>properties.item.content.permalink : a unique URL for this item.</li>\n<li>properties.item.content.summary : a short summary for that item</li>\n</ul></li>\n<li>properties.item.user : user posting that item.</li>\n<li>properties.item.target : (optional) a target for this item. Default: current item. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb (post) for this item</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Article", "name": "Article"}, "ItemsAPI": {"submodule": "ItemsAPI", "name": "ItemsAPI", "constructors": [{"params": [{"type": "object", "name": "parameters", "description": " Options, need to specify:\n<ul>\n<li>parameters.consumerKey : Echo API Key</li>\n<li>parameters.consumerSecret : Echo API Secret</li>\n<li>parameters.feed : Feed to communicate with\n<li>parameters.authMethod : optional, in ['oauth','basic']. Default 'oauth'\n</ul>"}], "description": "Gives access to all the things you can do with the items API of Echo."}], "namespace": "", "module": "echo", "methods": {"tagNote": {"params": [{"type": "string", "name": "target", "description": " ID of the note"}, {"type": "object", "name": "tag", "description": " Tag to apply to the note. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an note", "guessedname": "id", "guessedtype": "property"}, "unflag": {"params": [{"type": "object", "name": "target", "description": " Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>"}, {"type": "string", "name": "target", "description": " Id of the article to like"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"flag\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"unflag\" an item", "guessedname": "self", "guessedtype": "property"}, "untagNote": {"params": [{"type": "string", "name": "target", "description": " ID of the note"}, {"type": "object", "name": "tag", "description": " Tag to remove from the note. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an note", "guessedname": "id", "guessedtype": "property"}, "untagArticle": {"params": [{"type": "string", "name": "target", "description": " ID of the article"}, {"type": "object", "name": "tag", "description": " Tag to remove from the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an article", "guessedname": "id", "guessedtype": "property"}, "flagNote": {"params": [{"type": "string", "name": "target", "description": " Id of the note"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"flag\" an note", "guessedname": "id", "guessedtype": "property"}, "tag": {"params": [{"type": "object", "name": "target", "description": " Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an item", "guessedname": "self", "guessedtype": "property"}, "likeArticle": {"param": "{string} target Id of the article", "params": [{"type": "string", "name": "target", "description": " Id of the article"}, {"type": "object", "name": "like", "description": " like object. Specify\n<ul>\n<li>tag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an article", "guessedname": "id", "guessedtype": "property"}, "unflagNote": {"params": [{"type": "string", "name": "target", "description": " Id of the note"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"flag\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"unflag\" an note", "guessedname": "id", "guessedtype": "property"}, "flagStatus": {"params": [{"type": "string", "name": "target", "description": " Id of the status"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"flag\" an status", "guessedname": "id", "guessedtype": "property"}, "tagStatus": {"params": [{"type": "string", "name": "target", "description": " ID of the status"}, {"type": "object", "name": "tag", "description": " Tag to apply to the status. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an status", "guessedname": "id", "guessedtype": "property"}, "tagArticle": {"params": [{"type": "string", "name": "target", "description": " ID of the article"}, {"type": "object", "name": "tag", "description": " Tag to apply to the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an article", "guessedname": "id", "guessedtype": "property"}, "likeComment": {"param": "{string} target Id of the comment", "params": [{"type": "string", "name": "target", "description": " Id of the comment"}, {"type": "object", "name": "like", "description": " like object. Specify\n<ul>\n<li>tag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an comment", "guessedname": "id", "guessedtype": "property"}, "mux": {"params": [{"type": "string", "name": "query", "description": " Array of queries (JSON object)"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Perform multiple, parallel query"}, "likeStatus": {"param": "{string} target Id of the status", "params": [{"type": "string", "name": "target", "description": " Id of the status"}, {"type": "object", "name": "like", "description": " like object. Specify\n<ul>\n<li>tag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an status", "guessedname": "id", "guessedtype": "property"}, "submitComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to be submitted. Need to specify:\n<ul>\n<li>comment.content. Specify:</li>\n<ul>\n<li>comment.content.subject : subject of the comment</li>\n<li>comment.content.content : main content of the comment</li>\n<li>comment.content.permalink : permanent link for this comment</li>\n<ul>\n<li>comment.target : (optional) target of this comment. Specify:</li>\n<ul>\n<li>comment.target.id : ID of the target</li>\n<li>comment.target.type : type of the target</li>\n</ul>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a comment", "guessedname": "self", "guessedtype": "property"}, "flagArticle": {"params": [{"type": "string", "name": "target", "description": " Id of the article"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"flag\" an article", "guessedname": "id", "guessedtype": "property"}, "tagComment": {"params": [{"type": "string", "name": "target", "description": " ID of the comment"}, {"type": "object", "name": "tag", "description": " Tag to apply to the comment. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an comment", "guessedname": "id", "guessedtype": "property"}, "unflagComment": {"params": [{"type": "string", "name": "target", "description": " Id of the comment"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"flag\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"unflag\" an comment", "guessedname": "id", "guessedtype": "property"}, "likeNote": {"param": "{string} target Id of the note", "params": [{"type": "string", "name": "target", "description": " Id of the note"}, {"type": "object", "name": "like", "description": " like object. Specify\n<ul>\n<li>tag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an note", "guessedname": "id", "guessedtype": "property"}, "submitStatus": {"params": [{"type": "object", "name": "status", "description": " Status to be submitted. Need to specify:\n<ul>\n<li>status.content : main content of the status</li>\n<li>status.permalink : permanent link for this status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a status"}, "flag": {"params": [{"type": "object", "name": "target", "description": " Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"flag\" an item", "guessedname": "self", "guessedtype": "property"}, "submitNote": {"params": [{"type": "object", "name": "note", "description": " Note to be submitted. Need to specify:\n<ul>\n<li>note.content. Specify:</li>\n<ul>\n<li>note.content.content : main content of the note</li>\n<li>note.content.permalink : permanent link for this note</li>\n<ul>\n<li>note.target : (optional) target of this note. Specify:</li>\n<ul>\n<li>note.target.id : ID of the target</li>\n<li>note.target.type : type of the target</li>\n</ul>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a note", "guessedname": "self", "guessedtype": "property"}, "untag": {"params": [{"type": "object", "name": "target", "description": " Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "unTag an item", "guessedname": "self", "guessedtype": "property"}, "count": {"params": [{"type": "string", "name": "query", "description": " Query to perform"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Count how many answers match the query"}, "unflagStatus": {"params": [{"type": "string", "name": "target", "description": " Id of the status"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"flag\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"unflag\" an status", "guessedname": "id", "guessedtype": "property"}, "search": {"params": [{"type": "string", "name": "query", "description": " Query to perform"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Search for query"}, "like": {"param": "{object} target Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>", "params": [{"type": "object", "name": "target", "description": " Target of the action. Specify:\n<ul>\n<li>target.type: type of the target</li>\n<li>target.id : id of the target</li>\n</ul>"}, {"type": "object", "name": "like", "description": " like object. Specify\n<ul>\n<li>tag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an item", "guessedname": "self", "guessedtype": "property"}, "untagComment": {"params": [{"type": "string", "name": "target", "description": " ID of the comment"}, {"type": "object", "name": "tag", "description": " Tag to remove from the comment. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an comment", "guessedname": "id", "guessedtype": "property"}, "flagComment": {"params": [{"type": "string", "name": "target", "description": " Id of the comment"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"like\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"flag\" an comment", "guessedname": "id", "guessedtype": "property"}, "unflagArticle": {"params": [{"type": "string", "name": "target", "description": " Id of the article"}, {"type": "object", "name": "flag", "description": " flag object. Specify\n<ul>\n<li>flag.id : id for that \"flag\"</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "\"unflag\" an article", "guessedname": "id", "guessedtype": "property"}, "submitArticle": {"params": [{"type": "object", "name": "article", "description": " Article to be submitted. Need to specify:\n<ul>\n<li>article.content : The content of the article, specify:</li>\n<ul>\n<li>article.content.title : title of the article</li>\n<li>article.content.summary : a short summary. </li>\n<li>article.content.content : main content of the article</li>\n<li>article.content.permalink : permanent link for this article</li>\n</ul>\n<li>article.target : (optional) target of the article. Specify:</li>\n<ul>\n<li>article.target.type : type of the target</li>\n<li>article.target.id : id of the target</li>\n</ul>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit an article (typically : a blog entry)"}, "untagStatus": {"params": [{"type": "string", "name": "target", "description": " ID of the status"}, {"type": "object", "name": "tag", "description": " Tag to remove from the status. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an status", "guessedname": "id", "guessedtype": "property"}}, "file": "Class", "shortname": "ItemsAPI", "description": "Gives access to all the things you can do with the items API of Echo."}, "Like": {"description": "Like/Unlike", "module": "echo", "namespace": "", "param": "{object} properties. Specify:\n<ul>\n<li>properties.item.content : the like. Need to specify:\n<ul>\n<li>properties.item.content.id : id of the like.</li>\n</ul></li>\n<li>properties.item.user : user posting that item.</li>\n<li>properties.item.target : a mandatory target for the like. Specify\n<ul>\n<li>properties.item.target.id : the permalink of the target</li>\n<li>properties.item.type : the type of the target</li>\n</ul></li>\n<li>properties.item.feed : the feed this item is posted to.</li>\n<li>properties.item.verb : (optional) overwrite default verb for this item (post) -- set it to properly to like or unlike</li>\n</ul>", "guessedname": "init", "extends": "ActivityObject", "superclass": "ActivityObject", "file": "activityObjects.js", "guessedtype": "function", "shortname": "Like", "name": "Like"}}, "version": "0.1.9", "modules": {"echo": {"description": "Echo module for nodejs.", "submodules": [], "classlist": ["ItemsAPICore", "ActivityObject", "Article", "Comment", "Note", "Status", "Tag", "Like", "FeedsAPI", "ItemsAPI", "KvsAPI", "req", "UsersAPI", "TBind"], "filelist": ["Class.js", "ItemsAPICore.js", "activityObjects.js", "feedsAPI.js", "index.js", "itemsAPI.js", "kvsAPI.js", "render.js", "req.js", "sha1.js", "usersAPI.js", "utils.js"], "subdata": {}, "guessedname": "ItemsAPI", "guessedtype": "property", "name": "echo"}}, "filemap": {"ItemsAPICore.js": {"name": "ItemsAPICore.js", "classlist": [], "module": "echo", "guessedname": "Class", "guessedtype": "property", "property": "Class"}, "sha1.js": {"name": "sha1.js", "classlist": [], "module": "echo", "guessedname": "querystring", "guessedtype": "property", "property": "querystring"}, "usersAPI.js": {"name": "usersAPI.js", "classlist": [], "module": "echo", "guessedname": "req", "guessedtype": "property", "property": "req"}, "itemsAPI.js": {"name": "itemsAPI.js", "classlist": [], "module": "echo", "guessedname": "Class", "guessedtype": "property", "property": "Class"}, "Class.js": {"name": "Class.js", "classlist": [], "module": "echo", "guessedname": "Class", "guessedtype": "function", "method": "Class"}, "req.js": {"name": "req.js", "classlist": [], "module": "echo", "guessedname": "https", "guessedtype": "property", "property": "https"}, "utils.js": {"name": "utils.js", "classlist": [], "module": "echo", "guessedname": "Trait", "guessedtype": "property", "property": "Trait"}, "feedsAPI.js": {"name": "feedsAPI.js", "classlist": [], "module": "echo", "guessedname": "Class", "guessedtype": "property", "property": "Class"}, "kvsAPI.js": {"name": "kvsAPI.js", "classlist": [], "module": "echo", "guessedname": "Class", "guessedtype": "property", "property": "Class"}, "activityObjects.js": {"classlist": ["ActivityObject", "Article", "Comment", "Note", "Status", "Tag", "Like"], "name": "activityObjects.js", "module": "echo"}, "render.js": {"name": "render.js", "classlist": [], "module": "echo", "guessedname": "fs", "guessedtype": "property", "property": "fs"}, "index.js": {"classlist": [], "name": "index.js", "module": "echo"}}}