{"majorversion": 0, "classmap": {"Status\nconstructor\nextends ActivityObject": {"file": "activityObjects.js", "name": "Status\nconstructor\nextends ActivityObject", "namespace": "", "module": "utils", "guessedname": "init", "guessedtype": "function", "shortname": "Status\nconstructor\nextends ActivityObject"}, "KvsAPI": {"name": "KvsAPI", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " object for options<br/>\n<ul>\n<li>options.consumerKey</li>\n<li>options.consumerSecret</li>\n</ul>"}], "description": "Key-Value Store API for Echo"}], "namespace": "", "module": "utils", "guessedname": "self", "methods": {"put": {"params": [{"type": "object} kvs Key-Value pair to store. Specify:\n<ul>\n<li>kvs.key : key</li>\n<li>kvs.value : value</li>\n<li>kvs.public : (optional, in {true,false", "name": ")", "description": " indicates if value is public or not (default: false)</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Put data into the Echo Key-Value database to store the third-party widgets' arbitrary data elements permanently.", "guessedname": "public", "guessedtype": "property"}, "del": {"params": [{"type": "string", "name": "key", "description": " of the pair to delete"}, {"type": "boolean", "name": "ispublic", "description": " indicates if the pair to delete is public or private"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Delete KV pair"}, "get": {"params": [{"type": "object", "name": "kvs", "description": " Key to value to retrieve. Specify:\n<ul>\n<li>kvs.key : key of the value to retrieve</li>\n<li>kvs.appkey : customer application key</li>\n</ul>"}, {"type": "boolean", "name": "ispublic", "description": " indicate if data to retrieve is public or not."}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Fetch data from the Echo Key-Value Store."}}, "file": "sha1", "guessedtype": "property", "shortname": "KvsAPI", "properties": {"my": {"description": "Convert Items and Activity Objects into proper XML Activity Streams\nhttp://activitystrea.ms/schema/1.0/activity-schema-01.html", "guessedname": "my", "guessedtype": "property"}}, "description": "Key-Value Store API for Echo"}, "ItemsAPICore": {"name": "ItemsAPICore", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " object for options<br/>\n<ul><li>options.consumerKey</li>\n<li>options.consumerSecret</li>\n</ul>"}], "description": "Implements the 4 methods for ItemsAPI (submit, seach, count, mux)"}], "namespace": "", "module": "utils", "guessedname": "self", "methods": {"count": {"params": [{"type": "Object", "name": "query", "description": " Query to perform. Need to specify:\n<ul>\n<li>query.q : Echo Query Language query</li>\n<li>query.appkey : customer appkey</li>\n<li>query.since : optional. Since parameter</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback."}], "description": "\"count\" API method. <br /> Returns a number of items that match the specified query in JSON format. <br/> http://wiki.aboutecho.com/w/page/27888212/API-method-count", "guessedname": "url", "guessedtype": "property"}, "search": {"params": [{"type": "Object", "name": "query", "description": " Query to perform. Need to specify:\n<ul>\n<li>query.q : Echo Query Language query</li>\n<li>query.appkey : customer appkey</li>\n<li>query.since : optional. Since parameter</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "\"search\" API method <br /> Returns information about items that match the specified query in Activity Stream format. <br /> http://wiki.aboutecho.com/w/page/23491639/API-method-search", "guessedname": "url", "guessedtype": "property"}, "mux": {"params": [{"type": "object", "name": "query", "description": " JSON array of queries"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "\"mux\" API method <br/> The API method \"mux\" allows to \"multiplex\" requests, i.e. use a single API call to \"wrap\" several requests. The multiplexed requests are executed concurrently and independently by the Echo server. <br/> http://wiki.aboutecho.com/w/page/32433803/API-method-mux", "guessedname": "url", "guessedtype": "property"}, "submit": {"params": [{"type": "string", "name": "err", "description": " hopefully empty error"}, {"type": "Object", "name": "data", "description": " data.content MUST contain XML-formatted data to submit"}, {"type": "function", "name": "callback", "description": ""}], "description": "\"submit API method\" <br /> Endpoint to submit your data into the Echo Platform in the Activity Streams XML format. <br/> http://wiki.aboutecho.com/w/page/35059196/API-method-submit"}}, "file": "sha1", "guessedtype": "property", "shortname": "ItemsAPICore", "description": "Implements the 4 methods for ItemsAPI (submit, seach, count, mux)"}, "Comment\nconstructor\nextends ActivityObject": {"file": "activityObjects.js", "name": "Comment\nconstructor\nextends ActivityObject", "namespace": "", "module": "utils", "guessedname": "init", "guessedtype": "function", "shortname": "Comment\nconstructor\nextends ActivityObject"}, "ItemsAPI": {"name": "ItemsAPI", "constructors": [{"params": [{"type": "string", "name": "consumerKey", "description": " your Echo API key"}, {"type": "string", "name": "consumerSecret", "description": " your Echo API secret"}, {"type": "string", "name": "feed", "description": " the feed you want to interact wth (retrieve from/post to)"}], "description": "Gives access to all the things you can do with the items API of Echo."}], "namespace": "", "module": "utils", "methods": {"tagNote": {"params": [{"type": "object", "name": "note", "description": " Note to update. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the note. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an note", "guessedname": "note_", "guessedtype": "property"}, "unmarkStatus": {"params": [{"type": "object", "name": "status", "description": " Status to unmark. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to remove from the status. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Remove a mark from an status", "guessedname": "status_", "guessedtype": "property"}, "unlikeComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to unlike. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to remove a previous \"like\" to an comment", "guessedname": "comment_", "guessedtype": "property"}, "untagArticle": {"params": [{"type": "object", "name": "article", "description": " Article to untag. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to remove from the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an article", "guessedname": "article_", "guessedtype": "property"}, "flagNote": {"params": [{"type": "object", "name": "note", "description": " Note to flag. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to flag an note (for example : offensive note)", "guessedname": "note_", "guessedtype": "property"}, "likeStatus": {"params": [{"type": "object", "name": "status", "description": " Status to like. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an status", "guessedname": "status_", "guessedtype": "property"}, "updateNote": {"params": [{"type": "object", "name": "note", "description": " Note to be updated. Need to specify:\n<ul>\n<li>note.title : title of the note</li>\n<li>note.summary : a short summary. </li>\n<li>note.content : main content of the note</li>\n<li>note.permalink : permanent link for this note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to update an note"}, "likeArticle": {"params": [{"type": "object", "name": "article", "description": " Article to like. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an article", "guessedname": "article_", "guessedtype": "property"}, "updateComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to be updated. Need to specify:\n<ul>\n<li>comment.title : title of the comment</li>\n<li>comment.summary : a short summary. </li>\n<li>comment.content : main content of the comment</li>\n<li>comment.permalink : permanent link for this comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to update an comment"}, "unmarkNote": {"params": [{"type": "object", "name": "note", "description": " Note to unmark. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to remove from the note. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Remove a mark from an note", "guessedname": "note_", "guessedtype": "property"}, "updateArticle": {"params": [{"type": "object", "name": "article", "description": " Article to be updated. Need to specify:\n<ul>\n<li>article.title : title of the article</li>\n<li>article.summary : a short summary. </li>\n<li>article.content : main content of the article</li>\n<li>article.permalink : permanent link for this article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to update an article"}, "flagStatus": {"params": [{"type": "object", "name": "status", "description": " Status to flag. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to flag an status (for example : offensive status)", "guessedname": "status_", "guessedtype": "property"}, "tagStatus": {"params": [{"type": "object", "name": "status", "description": " Status to update. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the status. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an status", "guessedname": "status_", "guessedtype": "property"}, "markStatus": {"params": [{"type": "object", "name": "status", "description": " Status to mark. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to apply to the status. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Add a mark to an status", "guessedname": "status_", "guessedtype": "property"}, "tagArticle": {"params": [{"type": "object", "name": "article", "description": " Article to update. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the article. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an article", "guessedname": "article_", "guessedtype": "property"}, "likeComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to like. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an comment", "guessedname": "comment_", "guessedtype": "property"}, "unflagNote": {"params": [{"type": "object", "name": "note", "description": " Note to unflag. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to unflag an note (for example : offensive note)", "guessedname": "note_", "guessedtype": "property"}, "submitComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to be submitted. Need to specify:\n<ul>\n<li>comment.subject : subject of the comment</li>\n<li>comment.content : main content of the comment</li>\n<li>comment.permalink : permanent link for this comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a comment (typically : a response related to a blog entry)"}, "flagArticle": {"params": [{"type": "object", "name": "article", "description": " Article to flag. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to flag an article (for example : offensive article)", "guessedname": "article_", "guessedtype": "property"}, "markNote": {"params": [{"type": "object", "name": "note", "description": " Note to mark. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to apply to the note. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Add a mark to an note", "guessedname": "note_", "guessedtype": "property"}, "markArticle": {"params": [{"type": "object", "name": "article", "description": " Article to mark. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to apply to the article. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Add a mark to an article", "guessedname": "article_", "guessedtype": "property"}, "tagComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to update. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to apply to the comment. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Tag an comment", "guessedname": "comment_", "guessedtype": "property"}, "unlikeNote": {"params": [{"type": "object", "name": "note", "description": " Note to unlike. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to remove a previous \"like\" to an note", "guessedname": "note_", "guessedtype": "property"}, "unflagComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to unflag. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to unflag an comment (for example : offensive comment)", "guessedname": "comment_", "guessedtype": "property"}, "untagNote": {"params": [{"type": "object", "name": "note", "description": " Note to untag. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to remove from the note. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an note", "guessedname": "note_", "guessedtype": "property"}, "likeNote": {"params": [{"type": "object", "name": "note", "description": " Note to like. Need to specify:\n<ul>\n<li>note.permalink : reference to the existing note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to \"like\" an note", "guessedname": "note_", "guessedtype": "property"}, "unlikeStatus": {"params": [{"type": "object", "name": "status", "description": " Status to unlike. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to remove a previous \"like\" to an status", "guessedname": "status_", "guessedtype": "property"}, "submitStatus": {"params": [{"type": "object", "name": "status", "description": " Status to be submitted. Need to specify:\n<ul>\n<li>status.content : main content of the status</li>\n<li>status.permalink : permanent link for this status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a status"}, "unlikeArticle": {"params": [{"type": "object", "name": "article", "description": " Article to unlike. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to remove a previous \"like\" to an article", "guessedname": "article_", "guessedtype": "property"}, "submitNote": {"params": [{"type": "object", "name": "note", "description": " Note to be submitted. Need to specify:\n<ul>\n<li>note.content : main content of the note</li>\n<li>note.permalink : permanent link for this note</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit a note"}, "unmarkArticle": {"params": [{"type": "object", "name": "article", "description": " Article to unmark. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to remove from the article. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Remove a mark from an article", "guessedname": "article_", "guessedtype": "property"}, "count": {"params": [{"type": "string", "name": "query", "description": " Query to perform"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Count how many answer match the query", "param": "{string} query Array of queries (JSON object)"}, "unflagStatus": {"params": [{"type": "object", "name": "status", "description": " Status to unflag. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to unflag an status (for example : offensive status)", "guessedname": "status_", "guessedtype": "property"}, "search": {"params": [{"type": "string", "name": "query", "description": " Query to perform"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Search for query"}, "unmarkComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to unmark. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to remove from the comment. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Remove a mark from an comment", "guessedname": "comment_", "guessedtype": "property"}, "untagComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to untag. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to remove from the comment. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an comment", "guessedname": "comment_", "guessedtype": "property"}, "flagComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to flag. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to flag an comment (for example : offensive comment)", "guessedname": "comment_", "guessedtype": "property"}, "markComment": {"params": [{"type": "object", "name": "comment", "description": " Comment to mark. Need to specify:\n<ul>\n<li>comment.permalink : reference to the existing comment</li>\n</ul>"}, {"type": "object", "name": "mark", "description": " Marker to apply to the comment. Need to specify:\n<ul>\n<li>marker.title : title/content of your tag/mark</li>\n<li>marker.id : id for that update</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Add a mark to an comment", "guessedname": "comment_", "guessedtype": "property"}, "updateStatus": {"params": [{"type": "object", "name": "status", "description": " Status to be updated. Need to specify:\n<ul>\n<li>status.title : title of the status</li>\n<li>status.summary : a short summary. </li>\n<li>status.content : main content of the status</li>\n<li>status.permalink : permanent link for this status</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to update an status"}, "unflagArticle": {"params": [{"type": "object", "name": "article", "description": " Article to unflag. Need to specify:\n<ul>\n<li>article.permalink : reference to the existing article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Allow a user to unflag an article (for example : offensive article)", "guessedname": "article_", "guessedtype": "property"}, "submitArticle": {"params": [{"type": "object", "name": "article", "description": " Article to be submitted. Need to specify:\n<ul>\n<li>article.title : title of the article</li>\n<li>article.summary : a short summary. </li>\n<li>article.content : main content of the article</li>\n<li>article.permalink : permanent link for this article</li>\n</ul>"}, {"type": "object", "name": "user", "description": " user submitting the content. Need to specify:\n<ul>\n<li>user.id : unique id for this user</li>\n<li>user.name : name of the user</li>\n<li>user.avatarURL : avatar of the user</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "Submit an article (typically : a blog entry)"}, "untagStatus": {"params": [{"type": "object", "name": "status", "description": " Status to untag. Need to specify:\n<ul>\n<li>status.permalink : reference to the existing status</li>\n</ul>"}, {"type": "object", "name": "tag", "description": " Tag to remove from the status. Need to specify:\n<ul>\n<li>tag.title : title/content of your tag/mark</li>\n<li>tag.id : id for that tag</li>\n</ul>"}, {"type": "object", "name": "user", "description": " User submitting the update"}, {"type": "function", "name": "callback", "description": " callback called after submission"}], "description": "remove a tag on an status", "guessedname": "status_", "guessedtype": "property"}}, "file": "activityObjects", "shortname": "ItemsAPI", "description": "Gives access to all the things you can do with the items API of Echo."}, "FeedsAPI": {"name": "FeedsAPI", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " object for options<br/>\n<ul><li>options.consumerKey</li>\n<li>options.consumerSecret</li>\n</ul>"}], "description": "Feeds API for Echo"}], "namespace": "", "module": "utils", "guessedname": "self", "methods": {"unregister": {"params": [{"type": "object", "name": "feed", "description": " feed to unregister. Specify:\n<ul>\n<li>feed.url : (mandatory) url of the feed</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Unregister a feed for a consumer key", "guessedname": "url", "guessedtype": "property"}, "register": {"params": [{"type": "object", "name": "feed", "description": " feed to register. Specify:\n<ul>\n<li>feed.url : (mandatory) url of the new feed</li>\n<li>feed.interval : (optional) interval for polling the feed<li<\n</ul>"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Register a new feed for a consumer key", "guessedname": "url", "guessedtype": "property"}, "list": {"params": [{"type": "function", "name": "callback", "description": " callback"}], "description": "list all feeds attached to this consumer key", "guessedname": "url", "guessedtype": "property"}}, "file": "sha1", "guessedtype": "property", "shortname": "FeedsAPI", "description": "Feeds API for Echo"}, "UsersAPI": {"name": "UsersAPI", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " object for options<br/>\n<ul>\n<li>options.consumerKey</li>\n<li>options.consumerSecret</li>\n</ul>"}], "description": "Users API for Echo"}], "namespace": "", "module": "utils", "guessedname": "self", "methods": {"get": {"param": "{object} user user to update. Need to specify:\n<ul>\n<li>user.identityURL : User identity URL</li>\n<li>user.subject : show which parameters should be updated</li>\n<li>user.content : contains data to be used for user update</li>\n</ul>", "params": [{"type": "string", "name": "id", "description": " user identityURL"}, {"type": "function", "name": "callback", "description": " callback"}], "description": "Fetch user information", "guessedname": "url", "guessedtype": "property"}}, "file": "sha1", "guessedtype": "property", "shortname": "UsersAPI", "properties": {"url": {"param": "{object} user : info for the user. Need to specify:\n<ul>\n<li>user.appKey : customer appKey</li>\n<li>user.sessionID : Backplane sessions ID for this user</li>\n</ul>", "description": "Retrive currently logged in user information by session ID", "guessedname": "url", "guessedtype": "property"}}, "description": "Users API for Echo"}, "ActivityObject": {"methods": {"renderPost": {"params": [{"type": "function", "name": "callback", "description": " callback (should very likely be a call to a \"submit\" method)"}], "description": "Prepare an article for posting.", "guessedname": "self", "guessedtype": "property"}, "renderUpdate": {"params": [{"type": "Object} update type and content of the update.\n<ul>\n<li>update.type in {tag,untag,mark,unmark", "name": "</li>", "description": "\n<li>update.content.id : id of the update</li>\n<li>update.content.title : title/content of the update</li>\n</ul>"}, {"type": "function", "name": "callback", "description": " callback that will be called with the rendered update."}], "description": "Prepare the item for an update (tag / mark)"}}, "description": "Parent class to define all the Activity Objects Echo deals with, and their method for XML rendering.\nhttp://wiki.aboutecho.com/w/page/24780107/How%20To%20-%20Getting%20us%20your%20Firehose#Supportedactivityobjecttypes", "namespace": "", "module": "utils", "file": "activityObjects.js", "shortname": "ActivityObject", "name": "ActivityObject"}, "TBind": {"name": "TBind", "namespace": "", "module": "utils", "guessedname": "mergeOptions", "methods": {"ISODateString": {"function": "ISODateString", "params": [{"type": "Date", "name": "d", "description": " Format a date to be accepted by Echo"}], "guessedname": "ISODateString", "guessedtype": "function"}, "bind": {"function": "bind", "return": {"type": "function", "description": "The function passed in bound to the local scope"}, "description": "A bind function which binds the scope of the function to be called to the local scope of the object.", "params": [{"type": "function", "name": "fn", "description": " The function to bind the local scope to"}], "guessedname": "bind", "guessedtype": "function"}}, "file": "Trait", "guessedtype": "function", "shortname": "TBind", "description": "A Trait class for holding helper functions for enforcing scope"}, "Article\nconstructor\nextends ActivityObject": {"file": "activityObjects.js", "name": "Article\nconstructor\nextends ActivityObject", "namespace": "", "module": "utils", "guessedname": "init", "guessedtype": "function", "shortname": "Article\nconstructor\nextends ActivityObject"}, "Note\nextends ActivityObject\nconstructor": {"file": "activityObjects.js", "name": "Note\nextends ActivityObject\nconstructor", "namespace": "", "module": "utils", "guessedname": "init", "guessedtype": "function", "shortname": "Note\nextends ActivityObject\nconstructor"}}, "version": "0.1.9", "modules": {"utils": {"description": "A utility module used by this library", "submodules": [], "classlist": ["ItemsAPICore", "ActivityObject", "Article\nconstructor\nextends ActivityObject", "Comment\nconstructor\nextends ActivityObject", "Note\nextends ActivityObject\nconstructor", "Status\nconstructor\nextends ActivityObject", "FeedsAPI", "ItemsAPI", "KvsAPI", "UsersAPI", "TBind"], "filelist": ["Class.js", "ItemsAPICore.js", "activityObjects.js", "feedsAPI.js", "index.js", "itemsAPI.js", "kvsAPI.js", "render.js", "sha1.js", "usersAPI.js", "utils.js"], "subdata": {}, "name": "utils"}}, "filemap": {"ItemsAPICore.js": {"name": "ItemsAPICore.js", "classlist": [], "module": "utils", "guessedname": "sha1", "guessedtype": "property", "property": "sha1"}, "sha1.js": {"name": "sha1.js", "classlist": [], "module": "utils", "guessedname": "querystring", "guessedtype": "property", "property": "querystring"}, "usersAPI.js": {"name": "usersAPI.js", "classlist": [], "module": "utils", "guessedname": "sha1", "guessedtype": "property", "property": "sha1"}, "itemsAPI.js": {"name": "itemsAPI.js", "classlist": [], "module": "utils", "guessedname": "activityObjects", "guessedtype": "property", "property": "activityObjects"}, "Class.js": {"name": "Class.js", "classlist": [], "module": "utils", "guessedname": "Class", "guessedtype": "function", "method": "Class"}, "utils.js": {"name": "utils.js", "classlist": [], "module": "utils", "guessedname": "Trait", "guessedtype": "property", "property": "Trait"}, "feedsAPI.js": {"name": "feedsAPI.js", "classlist": [], "module": "utils", "guessedname": "sha1", "guessedtype": "property", "property": "sha1"}, "kvsAPI.js": {"name": "kvsAPI.js", "classlist": [], "module": "utils", "guessedname": "sha1", "guessedtype": "property", "property": "sha1"}, "activityObjects.js": {"classlist": ["ActivityObject", "Article\nconstructor\nextends ActivityObject", "Comment\nconstructor\nextends ActivityObject", "Note\nextends ActivityObject\nconstructor", "Status\nconstructor\nextends ActivityObject"], "name": "activityObjects.js", "module": "utils"}, "render.js": {"name": "render.js", "classlist": [], "module": "utils", "guessedname": "fs", "guessedtype": "property", "property": "fs"}, "index.js": {"name": "index.js", "classlist": [], "module": "utils", "guessedname": "ItemsAPI", "guessedtype": "property", "property": "ItemsAPI"}}}